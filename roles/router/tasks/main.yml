---

# TODO use ansible nmcli module once it supports wlan

- name: Attempt to setup networking
  block:
  - name: ensure network-manager packages are installed
    apt:
      name: "network-manager"
      state: present
      update_cache: yes
  - name: remove system-connections prior to creating new ones
    file:
      path: "/etc/NetworkManager/system-connections/"
      state: absent
  - name: mark wifi p2p-dev-* interfaces as unmanaged by nm
    blockinfile:
      path: /etc/NetworkManager/conf.d/unmanaged.conf
      block: |
              [keyfile]
              unmanaged-devices=interface-name:p2p*;
              #unmanaged-devices=interface-name:wlp*;
      create: yes
      marker: "# {mark}"
      owner: root
      group: root
      mode: 0600
  - name: ensure system-connections dir exists
    file:
      path: "/etc/NetworkManager/system-connections"
      state: directory
      mode: '0755'
  - name: set up bridges
    template:
      src: bridge_nm.j2
      dest: "/etc/NetworkManager/system-connections/{{ item.key }}.nmconnection"
      owner: root
      group: root
      mode: 0600
    loop: "{{ bridgenets | default({}) | dict2items }}"
    notify:
    - restart NetworkManager
  - name: set up ethernet configs
    template:
      src: wired_nm.j2
      dest: "/etc/NetworkManager/system-connections/{{ item.key }}.nmconnection"
      owner: root
      group: root
      mode: 0600
    loop: "{{ wirednets | default({}) | dict2items }}"
    notify:
    - restart NetworkManager
  - name: set up bridged ethernet configs
    template:
      src: bridge-slave_nm.j2
      dest: "/etc/NetworkManager/system-connections/{{ item.key }}.nmconnection"
      owner: root
      group: root
      mode: 0600
    loop: "{{ bridgeslavenets | default({}) | dict2items }}"
    notify:
    - restart NetworkManager
  - name: set up bridged wireless configs
    template:
      src: wireless-slave_nm.j2
      dest: "/etc/NetworkManager/system-connections/{{ item.key }}.nmconnection"
      owner: root
      group: root
      mode: 0600
    loop: "{{ wifislavenets | default({}) | dict2items }}"
    notify:
    - restart NetworkManager
  - name: set up wireless configs
    template:
      src: wireless_nm.j2
      dest: "/etc/NetworkManager/system-connections/{{ item.key }}.nmconnection"
      owner: root
      group: root
      mode: 0600
    loop: "{{ wifinets | default({}) | dict2items }}"
    notify:
    - restart NetworkManager
  - name: set up wan configs
    template:
      src: wan_nm.j2
      dest: "/etc/NetworkManager/system-connections/{{ item.key }}.nmconnection"
      owner: root
      group: root
      mode: 0600
    loop: "{{ wannets | default({}) | dict2items }}"
    notify:
    - restart NetworkManager
  - name: enable dhcp, dns, ssh on internal zone
    firewalld:
      zone: internal
      service: "{{ item }}"
      permanent: true
      state: enabled
    loop:
      - dhcp
      - dns
      - ssh
  - name: enable dhcp, dns, ssh on dmz zone
    firewalld:
      zone: dmz
      service: "{{ item }}"
      permanent: true
      state: enabled
    loop:
      - dhcp
      - dns
      - ssh
  - name: enable ssh on external zone
    firewalld:
      zone: external
      service: "{{ item }}"
      permanent: true
      state: enabled
    loop:
      - ssh
  - name: enable masquerade on external zone
    firewalld:
      zone: external
      masquerade: yes
      state: enabled
      permanent: yes
  rescue:
  - name: print message
    ansible.builtin.debug:
      # TODO broken in ansible 2.9
      # msg: "|
      # Configuring networks has failed, in step:
      #   {{ ansible_failed_task.name }}
      # With error:
      #   {{ ansible_failed_result }}"
      msg: "Failed when settings networks, rescuing.."
  - name: remove all network configs and let NetworkManager sort it out
    file:
      path: "/etc/NetworkManager/system-connections/"
      state: absent
    notify:
    - restart NetworkManager


- name: apply handlers now enstead of at the end of playbook
  meta: flush_handlers

# sudo firewall-cmd --list-all --zone=internal
# sudo firewall-cmd --change-zone=enp2s0 --zone=external
# sudo firewall-cmd --runtime-to-permanent
# sudo apt install ipset # for the firewalld warning
