---

- name: install pcengines packages
  apt:
    name: "{{ item }}"
    state: present
    install_recommends: yes
  with_items:
    - lm-sensors
    - flashrom
    - build-essential
    - dkms
    - checkinstall


- name: install firmware packages (from contrib/non-free)
  apt:
    name: "{{ item }}"
    state: present
    install_recommends: yes
  with_items:
    - firmware-atheros
    - firmware-linux
    - firmware-linux-nonfree


- name: install current kernel headers
  # dkms package recommends the kernel headers package but if there has been a
  # dist-upgrade afterwards, those headers don't correspond to the kernel
  # currently running now
  shell: apt-get install -y linux-headers-$(uname -r)


- name: copy leds-apu2 source files
  # from https://github.com/qu1x/leds-apu2.git
  copy:
    src: leds-apu2_qu1x/
    dest: /usr/src/leds-apu2-1.0.0/
    owner: root
    group: root
    mode: 0644


- name: check for installed leds-apu2 kernel module
  shell: modinfo leds-apu2 > /dev/null
  changed_when: false
  failed_when: false
  register: installed_module


- name: install leds-apu2 kernel module with DKMS
  command: dkms install leds-apu2/1.0.0
  when: installed_module.rc > 0


- name: copy apu2led source files
  # from  https://daduke.org/linux/apu2
  copy:
    src: apu2led/
    dest: /usr/src/apu2led/
    owner: root
    group: root
    mode: 0644


- name: make and checkinstall apu2led
  shell: |
          # create adhoc .deb:
          cd /usr/src/apu2led
          make
          checkinstall --pkgname apu2led --pkgrelease 1.0 --pkglicense GPL-2+ \
            --maintainer "{{ normal_user_email }}" --nodoc -y
  args:
    creates: /usr/bin/apu2led


- name: configure grub to show output during boot
  lineinfile:
    dest: /etc/default/grub
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^GRUB_CMDLINE_LINUX_DEFAULT=', line: 'GRUB_CMDLINE_LINUX_DEFAULT="console=tty0 console=ttyS0,115200n8"' }
    - { regexp: '^GRUB_TERMINAL=', line: 'GRUB_TERMINAL=serial' }
    - { regexp: '^GRUB_SERIAL_COMMAND=', line: 'GRUB_SERIAL_COMMAND="serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1"' }
  notify: update grub


# apply the handlers now instead of waiting for the end of the playbook
- meta: flush_handlers
