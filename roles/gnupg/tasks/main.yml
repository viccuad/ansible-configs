---

- name: copy gnupg files
  synchronize:
    src: .
    dest: "/home/{{ normal_user }}/"
    perms: yes
    recursive: yes
    links: yes
    rsync_opts:
      - "--exclude=.git*"
      - "--perms"
      - "--chmod=u+rw,g-rwx,o-rwx"
  become: yes
  become_user: "{{ normal_user }}"


- name: copy gnupg templates
  template:
    src: "{{ item }}"
    dest: /home/{{ normal_user }}/.gnupg/{{ item | basename | regex_replace('\.j2','') }}
    mode: '0600'
  with_fileglob:
    - ../templates/*.j2
  become: yes
  become_user: "{{ normal_user }}"


- name: install gnupg packages
  apt:
    name: "{{ item }}"
    state: present
    install_recommends: no
  with_items:
    - scdaemon
    - dirmngr
    - tor
    - hopenpgp-tools # check for problems in your key


- name: set env for gpg
  blockinfile:
    dest: "/home/{{ normal_user }}/.zshenv"
    block: |
            # From gpg-agent manual (for gpg 2.1)
            GPG_TTY=$(tty)
            export GPG_TTY
            # Tell ssh that we are using gpg-agent for ssh:
            unset SSH_AGENT_PID
            if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
                export SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
            fi
    marker: "# {mark} gnupg block"


- name: register variable for importing public gpg key
  command: gpg --list-keys --with-colons "{{ normal_user_gpgkey }}"
  register: public_gpg_imported
  changed_when: false
  failed_when: false
  become: yes
  become_user: "{{ normal_user }}"


- name: import gpg public key
  command: gpg --recv-keys "{{ normal_user_gpgkey }}"
  register: out
  changed_when: '"unchanged: 1" not in out.stderr'
  become: yes
  become_user: "{{ normal_user }}"
  when: public_gpg_imported.rc != 0


- name: check trust of our own public gpg key, should be ultimate
  command: gpg -K
  register: gpg_public_keys
  changed_when: false
  failed_when: false
  become: yes
  become_user: "{{ normal_user }}"


- name: set trust of our own public gpg key to ultimate
  command: echo "{{ normal_user_gpgkey }}:6:" | gpg --import-ownertrust
  when: '"ultimate" not in gpg_public_keys.stdout'
  become: yes
  become_user: "{{ normal_user }}"
